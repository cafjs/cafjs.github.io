{"version":3,"sources":["webpack:///./src/components/layoutMDX.js","webpack:///./src/pages/autonomous.mdx"],"names":["LayoutMDX","children","data","pageInfo","useStaticQuery","siteTitle","site","siteMetadata","title","isDocs","className","Date","getFullYear","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","to","isMDXComponent"],"mappings":"6FAAA,iDA6BeA,IAxBG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACXC,GADoC,EAAfC,SACdC,YAAe,eAU5B,OACE,oCACE,kBAAC,IAAD,CAAQC,UAAWH,EAAKI,KAAKC,aAAaC,MAAQC,QAAQ,IAC1D,8BAAM,yBAAKC,UAAU,yBAAyBT,IAC9C,gCACE,yBAAKS,UAAU,kCACb,8CAAmB,IAAIC,MAAOC,cAA9B,yB,8LCbCC,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,gDACA,qBAAG,oBAAMC,WAAW,IAChB,UAAa,4BACb,MAAS,CACP,SAAY,WACZ,QAAW,QACX,WAAc,OACd,YAAe,OACf,SAAY,QACZ,MAAS,UARZ,WAWC,oBAAMA,WAAW,OACf,UAAa,qCACb,MAAS,CACP,cAAiB,qBACjB,SAAY,WACZ,OAAU,IACV,KAAQ,IACR,QAAW,WAlBhB,OAqBH,mBAAKA,WAAW,OACV,UAAa,0BACb,IAAO,GACP,MAAS,GACT,IAAO,qFACP,OAAU,CAAC,0FAA2F,0FAA2F,2FACjM,MAAS,kCACT,MAAS,CACP,MAAS,OACT,OAAU,OACV,OAAU,IACV,cAAiB,SACjB,SAAY,WACZ,IAAO,IACP,KAAQ,KAEV,QAAW,SArCd,UAAH,yKAwCA,uHACA,iEACA,+ZACA,8FAA6E,sBAAQA,WAAW,KAAnB,aAA7E,0KACA,wCAAuB,sBAAQA,WAAW,KAAnB,UAAvB,sEAAwI,sBAAQA,WAAW,KAAnB,YAAxI,wQAA6b,YAAC,IAAD,CAAMC,GAAG,WAAWF,QAAQ,QAA5B,OAA7b,mEACA,uBACA,uDACA,mDACA,wVACA,wKACA,wLACA,yOAAwN,kBAAIC,WAAW,KAAf,UAAxN,qGACA,2BAAU,sBAAQA,WAAW,KAAnB,UAAV,qEAA0H,iBAAGA,WAAW,IACpI,KAAQ,6CAD8G,YAA1H,sBAE4C,sBAAQA,WAAW,KAAnB,mCAF5C,2DAGA,oDACA,2PACA,8MACA,qZACA,0RACA,4BAAW,iBAAGA,WAAW,IACrB,KAAQ,iDADD,gBAAX,mKAE6L,kBAAIA,WAAW,KAAf,eAF7L,gHAGA,uBACA,mEAAkD,sBAAQA,WAAW,KAAnB,UAAlD,0CACA,gEACA,6KACA,8PACA,sEACA,sBACE,kBAAIA,WAAW,MAAf,2IACA,kBAAIA,WAAW,MAAf,qDAEF,yOACA,+GAA8F,kBAAIA,WAAW,KAAf,kBAA9F,0LACA,wCACA,iFAAgE,oBAAMA,WAAW,IAC7E,UAAa,iBAD+C,gBAAhE,uEAIA,uCACA,qKAAoJ,oBAAMA,WAAW,IACjK,UAAa,iBADmI,WAApJ,YAGA,kMACA,6GACA,6RAKJJ,EAAWM,gBAAiB","file":"component---src-pages-autonomous-mdx-4b553b8d0633f690a03f.js","sourcesContent":["import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Header from './header';\n\nconst LayoutMDX = ({ children, pageInfo }) => {\n    const data = useStaticQuery(graphql`\n      query SiteTitleQuery2 {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `);\n\n    return (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title}  isDocs={false} />\n        <main><div className=\"mdx-article docs-page\">{children}</div></main>\n        <footer>\n          <div className='footer-bottom text-center py-5'>\n            <span>Â© Copyright {new Date().getFullYear()} Caf.js Labs LLC</span>\n          </div>\n        </footer>\n      </>\n    );\n};\n\nexport default LayoutMDX;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/antlai/git/caf_gatsbysite/src/components/layoutMDX.js\";\nimport { Link } from 'gatsby';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Autonomous Computation`}</h2>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"640px\",\n          \"width\": \"272px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"66.87116564417178%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\"\n          }\n        }}></span>{`\n  `}<img parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-image\",\n          \"alt\": \"\",\n          \"title\": \"\",\n          \"src\": \"/static/89b6429b040b66445771bdbaf200a4ef/c08c5/randy-fath-KyreMg96fuA-unsplash.jpg\",\n          \"srcSet\": [\"/static/89b6429b040b66445771bdbaf200a4ef/d2f63/randy-fath-KyreMg96fuA-unsplash.jpg 163w\", \"/static/89b6429b040b66445771bdbaf200a4ef/c989d/randy-fath-KyreMg96fuA-unsplash.jpg 325w\", \"/static/89b6429b040b66445771bdbaf200a4ef/c08c5/randy-fath-KyreMg96fuA-unsplash.jpg 640w\"],\n          \"sizes\": \"(max-width: 640px) 100vw, 640px\",\n          \"style\": {\n            \"width\": \"100%\",\n            \"height\": \"100%\",\n            \"margin\": \"0\",\n            \"verticalAlign\": \"middle\",\n            \"position\": \"absolute\",\n            \"top\": \"0\",\n            \"left\": \"0\"\n          },\n          \"loading\": \"lazy\"\n        }}></img>{`\n    `}</span>{`The Web was built with a request-response model. Servers were expensive and slow, and that model was a very good fit for the compute resources available at the time.`}</p>\n    <p>{`Many years later, and now we live in the land of milk and honey in terms of compute resources.`}</p>\n    <p>{`What else can we do with all that power?`}</p>\n    <p>{`One obvious candidate is to enable web clients to launch long term activities in the Cloud, where long term could mean years. These activities are a good complement to a request-response model. For example, they could warn you, or take some action, if something critical to you has happened on the Web. And that would not be spam, after all you were the one setting up the continuous query.`}</p>\n    <p>{`It is unreasonable to assume that anybody should be able to launch an `}<strong parentName=\"p\">{`arbitrary`}</strong>{` activity in any site. Someone has to pay for it. Denial of service becomes trivial. Running untrusted code is unsafe. We need a bit more structure to make it happen.`}</p>\n    <p>{`And that's when `}<strong parentName=\"p\">{`Caf.js`}</strong>{` comes into play. Make it easier to write applications that create `}<strong parentName=\"p\">{`specific`}</strong>{` long-term activities on behalf of subscribed customers. As long as the end customer maintains the app subscription, the activities continue. The application guarantees that end customers do not abuse the system. The platform provider hosting the app (could be `}<Link to=\"/hosting\" mdxType=\"Link\">{`us!`}</Link>{`) ultimately guarantees that the app does not abuse the system.`}</p>\n    <hr />\n    <p>{`Let's look at a few use cases.`}</p>\n    <h4>{`Cloud-based Multi-tasking`}</h4>\n    <p>{`Modern browsers throttle background tabs, making them unusable for running tasks. Service workers of web apps that are not explicitly installed (most of them) can be garbage collected at any time. AFAIK, without browser extensions, there are no reliable methods in the browser to keep background tasks active long term.`}</p>\n    <p>{`And this is all for a good reason. The last thing you want is a website that you visited three months ago is still draining your phone battery.`}</p>\n    <p>{`But to recreate a more desktop-like experience in the browser we need reliable background tasks. If we cannot run them in the phone, can we do it in the Cloud?`}</p>\n    <p>{`The critical part is the context switch between activities. We want to convince the user that background tasks are running in the phone, but they are not, they are running in the Cloud. When we swap a visible `}<em parentName=\"p\">{`iframe`}</em>{` of one activity by another one, we need to show progress, and the transition needs to be smooth.`}</p>\n    <p>{`In `}<strong parentName=\"p\">{`Caf.js`}</strong>{` cloud-based multi-tasking is implemented by some trickery in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cafjs/caf_launcher.git\"\n      }}>{`Launcher`}</a>{` app, and enabling `}<strong parentName=\"p\">{`proactive server side rendering`}</strong>{` in most of our apps. We describe this technique below.`}</p>\n    <h4>{`Continuous GraphQL Queries`}</h4>\n    <p>{`Many front-ends configure React components with GraphQL queries and a request-response model. The client describes in a single request what its components need, and the server evaluates the query and returns the configuration.`}</p>\n    <p>{`What happens when the configuration changes? The server could notify the client using a web socket, and then the client reloads. Or the client could repeat the query every so often.`}</p>\n    <p>{`But we can do better. The previous approaches add latency and force unnecessary reloads. Instead, the client could install a continuous query in the Cloud and, when the configuration changes, receive a new configuration from a web socket. There is no false alarms, the server knows exactly what the client needs. There is no extra delay, the notification is the new configuration.`}</p>\n    <p>{`But we can do even better. The server could regularly interact with many external services to gather configuration data, and cache it locally. And now all the continuous GraphQL queries evaluate on local data, reused for the benefit of thousands of clients.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cafjs/caf_hellographql.git\"\n      }}>{`HelloGraphQL`}</a>{` weather app is an example of these ideas. Clients obtain weather information by installing a continuous query in the Cloud. The backend periodically polls the `}<em parentName=\"p\">{`OpenWeather`}</em>{` API. Queries evaluate on local data. When the weather changes, a registered IoT device gets a notification.`}</p>\n    <hr />\n    <p>{`How are these experiences implemented with `}<strong parentName=\"p\">{`Caf.js`}</strong>{`? Let's start with a few new concepts.`}</p>\n    <h4>{`Proactive Server Side Rendering (PSSR)`}</h4>\n    <p>{`Traditional Server Side Rendering (SSR) uses a request-response model. When a page request hits the server, the server renders and returns the html.`}</p>\n    <p>{`Proactive Server Side Rendering (PSSR) does not wait for a page request. Whenever there is a change that affects the page, the server renders and pushes the html to an external cache, using an unguessable key known by the client.`}</p>\n    <p>{`Two simple optimizations make PSSR practical:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Do not render when the page is likely to change again before the client reads it. Set expire time in cache to handle estimation errors.`}</li>\n      <li parentName=\"ul\">{`Pick a target cache that is close to the client.`}</li>\n    </ul>\n    <p>{`With PSSR a page request is first looked up in a cache close by. If found, the html page is displayed, and then it continues with hydration, similar to SSR. If missing, the request is forwarded to the server.`}</p>\n    <p>{`Why PSSR? Manage a cache inside the network of a 5G mobile provider with, for example, `}<em parentName=\"p\">{`AWS Wavelength`}</em>{`, and 5G clients will load a page instantly, in low tens of milliseconds. No differences between static and dynamic content. And with much less complexity than distributed rendering.`}</p>\n    <h4>{`Pulse Requests`}</h4>\n    <p>{`A cloud assistant is made autonomous by implementing the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`__ca_pulse__`}</code>{` method.\nThis method will be called periodically by the framework.`}</p>\n    <h4>{`Notifications`}</h4>\n    <p>{`The client library combines a request-response style with events triggered by notifications. Notifications are created in the Cloud with the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`session`}</code>{` plugin.`}</p>\n    <p>{`When clients are offline, the notifications created by autonomous computations queue in the Cloud. Queues are managed by application code to avoid running out of memory.`}</p>\n    <p>{`When a client connects, notifications are delivered in real-time using a web socket.`}</p>\n    <p>{`A cloud assistant can have multiple notification queues, identified by names chosen by its clients. This allows stirring notifications to a client device, or swapping devices without losing notifications. A client session can always target a particular queue.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}