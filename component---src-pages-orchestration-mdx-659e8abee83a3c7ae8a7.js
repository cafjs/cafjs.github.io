(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"8YbJ":function(e,t,a){"use strict";var n=a("q1tI"),i=a.n(n),s=a("Wbzz"),o=a("LbRr");t.a=function(e){var t=e.children,a=(e.pageInfo,Object(s.c)("2417480334"));return i.a.createElement(i.a.Fragment,null,i.a.createElement(o.a,{siteTitle:a.site.siteMetadata.title,isDocs:!1}),i.a.createElement("main",null,i.a.createElement("div",{className:"mdx-article docs-page"},t)),i.a.createElement("footer",null,i.a.createElement("div",{className:"footer-bottom text-center py-5"},i.a.createElement("span",null,"Â© Copyright ",(new Date).getFullYear()," Caf.js Labs LLC"))))}},bz09:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return p}));var n=a("zLVn"),i=(a("q1tI"),a("7ljp")),s=a("8YbJ"),o=a("Wbzz"),r={},l={_frontmatter:r},c=s.a;function p(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)(c,Object.assign({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",null,"Reliable Service Orchestration"),Object(i.b)("p",null,Object(i.b)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"640px",width:"272px"}},"\n      ",Object(i.b)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"66.87116564417178%",position:"relative",bottom:"0",left:"0",display:"block"}}),"\n  ",Object(i.b)("img",{parentName:"span",className:"gatsby-resp-image-image",alt:"",title:"",src:"/static/e3b86b0b76e5896608b5cb196a1ed2ef/c08c5/bill-oxford--fGqsewtsJY-unsplash.jpg",srcSet:["/static/e3b86b0b76e5896608b5cb196a1ed2ef/d2f63/bill-oxford--fGqsewtsJY-unsplash.jpg 163w","/static/e3b86b0b76e5896608b5cb196a1ed2ef/c989d/bill-oxford--fGqsewtsJY-unsplash.jpg 325w","/static/e3b86b0b76e5896608b5cb196a1ed2ef/c08c5/bill-oxford--fGqsewtsJY-unsplash.jpg 640w"],sizes:"(max-width: 640px) 100vw, 640px",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",top:"0",left:"0"},loading:"lazy"}),"\n    "),"A typical Cloud Assistant (CA) has kilobytes of private state, carefully managed to be consistent with its external commitments, even after server failures."),Object(i.b)("p",null,"A stateful CA naturally implements a reliable orchestrator of interactions with external services."),Object(i.b)("p",null,"CAs are ",Object(i.b)("strong",{parentName:"p"},"transactional actors")," that interact with the world using ",Object(i.b)("strong",{parentName:"p"},"transactional plugins"),". We will explain what this means in a moment."),Object(i.b)("p",null,"But first let's look at a use case."),Object(i.b)("hr",null),Object(i.b)("h3",null,"JAMstack"),Object(i.b)("p",null,"High performance front-ends are moving to a new architecture, exemplified by ",Object(i.b)("em",{parentName:"p"},"JAMstack"),":"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Create your website with a Static Site Generator (SSG), such as ",Object(i.b)("em",{parentName:"li"},"Gatsby"),"."),Object(i.b)("li",{parentName:"ol"},"Cache it everywhere using a CDN."),Object(i.b)("li",{parentName:"ol"},"Rely on APIs for external services and loading dynamic content.")),Object(i.b)("p",null,"These sites are not always static. For example, ",Object(i.b)("em",{parentName:"p"},"Gatsby")," creates React components that will be hydrated when the page loads. And after that a ",Object(i.b)("em",{parentName:"p"},"Gatsby")," site becomes a web app."),Object(i.b)("p",null,"What is the weakness of this clean architecture? Too many external APIs. For sending an e-mail, loading dynamic content, paying a bill, authenticating a user, shipping something, storing user settings,... And they could come from different providers, requiring different API credentials."),Object(i.b)("p",null,"And where do all these credentials end up? In the browser. And with a new wave of security hardware bugs, there is no place to hide in the browser. Heroic attempts like ",Object(i.b)("em",{parentName:"p"},"site isolation")," are complex, inefficient, and not universally supported. These credentials are gone..."),Object(i.b)("p",null,"And what if a sequence of API calls is needed to complete a task, and then the client crashes? You got the money, but did not follow up with the order. You ordered the goods, but never ship them. You sent that confirmation e-mail, but did nothing. And you have no record of what actually happened."),Object(i.b)("p",null,"And what about latency and atomicity of the dynamic content? The page starts with default values, and then it flips to actual ones. This is very visible because the static content loads so fast. And the dynamic content could be loaded from different sources, at different speeds, making the page inconsistent for a while, confusing your customer."),Object(i.b)("p",null,"How does ",Object(i.b)("strong",{parentName:"p"},"Caf.js")," help JAMstack?"),Object(i.b)("p",null,"A typical ",Object(i.b)("strong",{parentName:"p"},"Caf.js")," application has a Cloud Assistant (CA) per customer and follows least privilege principles. A CA protects the API credentials, and its external methods limit what these credentials can do. For example, an API credential could allow sending an e-mail to anybody, but the CA will ensure that it is only sent to the support account."),Object(i.b)("p",null,"How does the client invoke CA methods? A short-lived signed credential (JWT) provides temporary access to these methods. This credential will be exposed to the browser, and possibly compromised, but the damage is much less than exposing all your raw credentials."),Object(i.b)("p",null,"A CA is a ",Object(i.b)("strong",{parentName:"p"},"smart card")," for your API credentials."),Object(i.b)("p",null,"What about sequencing API calls? A CA could provide an external method to trigger the sequence, and then keep track of its progress with internal state. This CA will also retry an started sequence after a failure. Retrying is always safe, as we will explain next."),Object(i.b)("p",null,"A CA is a ",Object(i.b)("strong",{parentName:"p"},"reliable state machine")," for your API calls."),Object(i.b)("p",null,"And dynamic content loading? An ",Object(i.b)(o.a,{to:"/autonomous",mdxType:"Link"},"autonomous")," CA periodically prefetches dynamic content from multiple sources, guaranteeing that a CA method call returns a consistent snapshot of this content. Loading could be even faster with proactive server side rendering, described in  ",Object(i.b)(o.a,{to:"/autonomous",mdxType:"Link"},"this")," section."),Object(i.b)("p",null,"A CA is a ",Object(i.b)("strong",{parentName:"p"},"caching reverse proxy")," for dynamic content."),Object(i.b)("p",null,"See the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cafjs/caf_hellopaypal.git"},"HelloPayPal")," app for an implementation of a reliable PayPal checkout based on these ideas."),Object(i.b)("hr",null),Object(i.b)("p",null,"How are these experiences implemented with ",Object(i.b)("strong",{parentName:"p"},"Caf.js"),"?"),Object(i.b)("h3",null,"Transactional Actors and Plugins"),Object(i.b)("p",null,"The foundation of a Cloud Assistant (CA) is the Actor Model. An actor has a location-independent name, some private state, a queue to serialize the processing of requests, and the ability to asynchronously interact with other actors."),Object(i.b)("p",null,"There is never more than one active CA with a given name, making serialization a ",Object(i.b)("strong",{parentName:"p"},"cluster-wide")," property."),Object(i.b)("p",null,"CAs are ",Object(i.b)("strong",{parentName:"p"},"transactional actors"),". Each request creates a transaction that modifies internal state when it commits, or rolls back changes when it returns an application error or throws an exception."),Object(i.b)("p",null,"A CA checkpoints to a Redis instance ",Object(i.b)("strong",{parentName:"p"},"before")," committing a transaction. It externalizes state changes ",Object(i.b)("strong",{parentName:"p"},"after")," the transaction commits, i.e., after Redis makes the checkpoint stable. Therefore, it can recover from a failure and the world will never notice."),Object(i.b)("p",null,"How does ",Object(i.b)("strong",{parentName:"p"},"Caf.js")," delay externalization? It uses ",Object(i.b)("strong",{parentName:"p"},"transactional plugins"),' to mediate external interactions. Invoking a plugin method just appends to a log the intent of performing an operation. If there are no errors, both the plugin logs and the state changes are checkpointed together. After the checkpoint finishes, the transaction is assumed to be committed, and then the "real" plugin methods are invoked, making the changes externally visible.'),Object(i.b)("p",null,"What happens when there is a failure? There are two cases:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"The checkpoint made it to Redis, but we crashed while invoking the committed actions. Recover by loading from the checkpoint the new state and the committed actions, and then (re)do all the committed actions."),Object(i.b)("li",{parentName:"ol"},"The checkpoint never made it to Redis. Anything that happened during the failed transaction had no side effects, and can be ignored. Recover as in Case 1 but with the previous checkpoint.")),Object(i.b)("p",null,"Recovery could perform the same operation multiple times. What if the operation is not idempotent? The transactional plugin ",Object(i.b)("strong",{parentName:"p"},"makes")," it idempotent. For example, the plugin could log a unique id per operation, and use that id to query its status before retrying. Or just retry, when the operation is naturally idempotent."),Object(i.b)("p",null,"The beauty of ",Object(i.b)("strong",{parentName:"p"},"Caf.js")," is that all this complexity is hidden in plugins, and application code just benefits from a more robust platform."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-orchestration-mdx-659e8abee83a3c7ae8a7.js.map