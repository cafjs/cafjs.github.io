(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"8YbJ":function(e,t,a){"use strict";var n=a("q1tI"),o=a.n(n),i=a("Wbzz"),r=a("LbRr");t.a=function(e){var t=e.children,a=(e.pageInfo,Object(i.c)("2417480334"));return o.a.createElement(o.a.Fragment,null,o.a.createElement(r.a,{siteTitle:a.site.siteMetadata.title,isDocs:!1}),o.a.createElement("main",null,o.a.createElement("div",{className:"mdx-article docs-page"},t)),o.a.createElement("footer",null,o.a.createElement("div",{className:"footer-bottom text-center py-5"},o.a.createElement("span",null,"Â© Copyright ",(new Date).getFullYear()," Caf.js Labs LLC"))))}},cGou:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return c}));var n=a("zLVn"),o=(a("q1tI"),a("7ljp")),i=a("8YbJ"),r={},s={_frontmatter:r},l=i.a;function c(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)(l,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Permanent Presence"),Object(o.b)("p",null,Object(o.b)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"640px",width:"272px"}},"\n      ",Object(o.b)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"71.77914110429448%",position:"relative",bottom:"0",left:"0",display:"block"}}),"\n  ",Object(o.b)("img",{parentName:"span",className:"gatsby-resp-image-image",alt:"",title:"",src:"/static/6df725c2deafb38dfb9f5651b53dfa9e/c08c5/florian-wehde-yNJ9unY2OnE-unsplash-crop.jpg",srcSet:["/static/6df725c2deafb38dfb9f5651b53dfa9e/d2f63/florian-wehde-yNJ9unY2OnE-unsplash-crop.jpg 163w","/static/6df725c2deafb38dfb9f5651b53dfa9e/c989d/florian-wehde-yNJ9unY2OnE-unsplash-crop.jpg 325w","/static/6df725c2deafb38dfb9f5651b53dfa9e/c08c5/florian-wehde-yNJ9unY2OnE-unsplash-crop.jpg 640w"],sizes:"(max-width: 640px) 100vw, 640px",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",top:"0",left:"0"},loading:"lazy"}),"\n    "),"Modern browsers enable offline experiences for Progressive Web Apps (PWAs) with service workers."),Object(o.b)("p",null,"But what about the rest of the world? Services, clients, or devices that need interaction? They all have to wait."),Object(o.b)("p",null,"And connectivity is not always symmetric. Most IoT devices are not directly exposed to the Internet, otherwise they would be hacked in an hour.\nThis makes remote interaction with devices even more difficult."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Caf.js")," makes devices and web app instances accessible from anywhere at any time. An abstraction that we call ",Object(o.b)("strong",{parentName:"p"},"Reverse Service Worker (RSW)")," keeps them safe. A ",Object(o.b)("strong",{parentName:"p"},"three-way isomorphic")," framework enables quick prototyping of new sharing experiences."),Object(o.b)("p",null,"Let's look at a few use cases first, and then describe the technology."),Object(o.b)("hr",null),Object(o.b)("h4",null,"Safe sharing of Bluetooth devices"),Object(o.b)("p",null,"So many Bluetooth devices around us. An indoor exercise bike, a heart rate/ECG monitor, a connected toy, an smart light bulb, a speaker, a temperature sensor, a thermostat, a drone, a fridge, a watch, a battery, a car diagnostics tool..."),Object(o.b)("p",null,"What if you could instantly share them across the Internet? With your doctor, your fitness instructor, your friend in a Zoom session, your colleagues working from home, a remote expert..."),Object(o.b)("p",null,"And do that safely, with no setup, with just a browser. E-mail or text a URL to your peer, and when they click on the link they control the device. But only until you revoke access, or the embedded token expires."),Object(o.b)("p",null,"With ",Object(o.b)("strong",{parentName:"p"},"Caf.js")," you can do that with a few hundred lines of JavaScript. There are some examples in GitHub already. ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cafjs/caf_healthypi.git"},"HealthyPi"),", a cheap ECG/Body temperature/SPO2 monitor.  ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cafjs/caf_hellopuckjs.git"},"Puck.js"),", a programmable beacon with many sensors. And it is easy to build your own with our app template generator tool, i.e., ",Object(o.b)("code",{parentName:"p",className:"language-text"},"cafjs generate yourapp iotbrowser"),"."),Object(o.b)("h4",null,"Integration of real devices in VR/AR"),Object(o.b)("p",null,"When your real home is part of a virtual world, and action in VR could switch off the lights of your real home, thousands of miles away."),Object(o.b)("p",null,"You could implement this today, by creating an avatar of the lamp, which forwards actions to the physical lamp across the Internet."),Object(o.b)("p",null,"But this is hard to get right. Any delays or connectivity issues will ruin the virtual experience. And directly exposing your lamp to the Internet is risky."),Object(o.b)("p",null,"Instead, ",Object(o.b)("strong",{parentName:"p"},"Caf.js")," can take care of the backend for your lamp avatar, ensuring safety and predictable latency. And then you can focus on making the avatar more realistic."),Object(o.b)("p",null,"What about AR? You are likely to share the room with the physical lamp. And when you look fixedly at it, a user interface will pop up allowing, for example, a change in the color hue."),Object(o.b)("p",null,"The connectivity challenges with AR are not any easier. What if the lamp is in a vacation rental, or in a shop, or at the office? It would be much easier if the AR client device just needed Internet connectivity, and the access policy was centrally managed for all the shared devices, as we do in ",Object(o.b)("strong",{parentName:"p"},"Caf.js"),"."),Object(o.b)("p",null,"But the real fun starts with some remote team members in VR, and others local in AR. And they all collaborate in real-time by interacting with shared physical devices. With ",Object(o.b)("strong",{parentName:"p"},"Caf.js")," all these user interfaces, and the state of the connected physical devices, are always in sync."),Object(o.b)("p",null,"For example, an interior designer can configure the lights at your home remotely using VR, and as you see the changes in the real world, you can also suggest modifications in real-time with your AR interface."),Object(o.b)("p",null,"A bare bones example to do just that is in GitHub. ",Object(o.b)("a",{parentName:"p",href:"https://github.com/cafjs/caf_hellohue.git"},"Hue")," controls a color smart bulb using three interfaces VR, AR, and html, keeping all of them in sync, and in sync with reality."),Object(o.b)("hr",null),Object(o.b)("p",null,"How are these experiences implemented with ",Object(o.b)("strong",{parentName:"p"},"Caf.js"),"? Let's start with a few new concepts."),Object(o.b)("h4",null,"Reverse Service Workers (RSW)"),Object(o.b)("p",null,"Service workers enable offline experiences for Progressive Web Apps (PWAs). A service worker runs a custom script, in a separate context from the web page, to mediate network access and cache data. When connectivity is poor, it can pretend that the network is still working by fetching from a local cache or delaying sends."),Object(o.b)("p",null,"An RSW lives in the Cloud and has a dual role to a service worker in the browser. It mediates network requests from anywhere in the Internet to one device or app instance, i.e., its endpoint."),Object(o.b)("p",null,"RSWs are implemented with a ",Object(o.b)("strong",{parentName:"p"},"cloud assistant"),", following the Actor Model, and thousands of them can run on one ",Object(o.b)("em",{parentName:"p"},"node.js")," process."),Object(o.b)("p",null,"Each RSW has an stable URL that provides a public name for the endpoint, some private state, a set of methods that can be called remotely, and a managed security policy that restricts who can call them."),Object(o.b)("p",null,"RSWs have two modes of operation:"),Object(o.b)("h5",null,"1. Pass-through mode"),Object(o.b)("p",null,"In this mode an endpoint is always connected to its RSW with a web socket."),Object(o.b)("p",null,"When this RSW receives a request, it performs security checks, updates its state, and notifies the endpoint, and other clients, using web sockets. Notifications can then trigger actions in the physical world, or keep other user interfaces in sync."),Object(o.b)("p",null,"Clients never have direct access to endpoints. They use short-lived signed credentials (JWT). The access policy is centrally managed and consistent for all your devices. More importantly, the RSW could expose the minimal functionality required by your app, keeping the endpoint safe."),Object(o.b)("h5",null,"2. Impersonation mode"),Object(o.b)("p",null,"What happens when the endpoint is not connected? The RSW ",Object(o.b)("strong",{parentName:"p"},"pretends")," to be the endpoint, making decisions on its behalf based on local state, and helping the rest of the world to move forward."),Object(o.b)("p",null,"Most RSWs implement both modes, switching between them based on endpoint connectivity. For example, an RSW could start in impersonation mode, negotiate some actions, and then relay these actions in pass-through mode when the endpoint eventually connects."),Object(o.b)("p",null,"What if offline endpoint actions are incompatible with actions negotiated by the RSW? Action reconciliation can be complex and application dependent. A simple strategy to avoid inconsistencies is to route all actions through the RSW when online, and only perform emergency, or read-only, actions when offline."),Object(o.b)("h4",null,"Three-way Isomorphic"),Object(o.b)("p",null,"What is really an endpoint? In most cases we are not going to modify the firmware of a simple device, or patch an existing application. Instead, we write bridging code, also in JavaScript, that will interface locally with the real endpoint over Bluetooth or other protocol."),Object(o.b)("p",null,"Therefore, most applications in ",Object(o.b)("strong",{parentName:"p"},"Caf.js")," are made of three JavaScript programs, i.e., front-end, cloud, and device bridging code."),Object(o.b)("p",null,"The advantage of ",Object(o.b)("strong",{parentName:"p"},"Caf.js")," is that these three programs are all developed, debugged, and deployed as a single unit. They also share many software components. In fact, using our CLI tools, you can emulate in a laptop both the Cloud and the device. And then, trace a request from the browser, to the emulated Cloud, and finally to the emulated device, all without leaving the Chrome web developer tools."),Object(o.b)("p",null,"But that's not all. ",Object(o.b)("strong",{parentName:"p"},"Caf.js")," is a ",Object(o.b)("strong",{parentName:"p"},"three-way isomorphic")," framework. The device bridging code runs in a Raspberry Pi, but it can also run in a browser, and in the Cloud too."),Object(o.b)("p",null,"And that opens many doors. You don't need to carry a Raspberry Pi or a laptop. Your phone, with a browser that supports the Web Bluetooth API, such as Chrome for Android, can also bridge Bluetooth devices."),Object(o.b)("p",null,"Some applications will still require a  dedicated bridging device, but many will benefit from the convenience of the phone. And for Android phones is even better, the default browser is all you need!"),Object(o.b)("p",null,"What about running bridging code in the Cloud? Three important benefits:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Simplifies endpoint impersonation for RSWs."),Object(o.b)("li",{parentName:"ul"},"Enables realistic load testing by emulating thousands of devices in the Cloud."),Object(o.b)("li",{parentName:"ul"},"Dynamically creates user interfaces by introspecting the bridging code.")),Object(o.b)("p",null,"and all this isomorphic magic relies on standard tools, such as ",Object(o.b)("em",{parentName:"p"},"browserify"),"."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-permanent-mdx-4968b12954cf434d2644.js.map